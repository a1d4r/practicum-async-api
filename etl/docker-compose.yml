version: "3.9"

services:

  etl:
    build:
      context: .
      target: production
    env_file:
      - .env.docker
    volumes:
      - etl-data:/data
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    env_file:
      - infra/postgres/.env
    volumes:
      - ./infra/postgres/pg_dump.sql:/docker-entrypoint-initdb.d/pg_dump.sql
      - postgres-data:/data/postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d movies_database" ]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:
      - infra

  elasticsearch:
    image: elasticsearch:8.12.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - infra

  kibana:
    image: kibana:8.12.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - infra

  init-elasticsearch:
    image: curlimages/curl:8.6.0
    command: >-
      curl -s
      -XPUT -H 'Content-Type: application/json'
      http://elasticsearch:9200/movies
      -d @/data/index.json
    volumes:
      - ./infra/elasticsearch/index.json:/data/index.json
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - infra


volumes:
  etl-data:
  postgres-data:
  elasticsearch-data:
